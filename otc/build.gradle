apply plugin: 'java'
apply plugin: 'maven'

group = 't-systems'
version = '0.0.1-SNAPSHOT'

description = """"""

sourceCompatibility = 1.7
targetCompatibility = 1.7



repositories {
        
     maven { url "http://simulation.tudelft.nl/maven/" }
     maven { url "http://repo.maven.apache.org/maven2" }
     mavenCentral()
   flatDir {
       dirs 'lib'
   }
}

sourceSets {
    main {
        java {
            srcDir 'src'
        }
        resources {
            srcDir 'src/resources'
        }
    }
}

dependencies {
	compile group: 'com.eclipsesource',name: 'minimal-json',version:'0.9.1'
    compile group: 'org.apache.httpcomponents', name: 'httpclient', version:'4.3.6'
    compile group: 'joda-time', name: 'joda-time', version:'2.8.1'
    compile group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version:'2.5.3'
    compile group: 'commons-logging', name: 'commons-logging', version:'1.1.3'
    compile group: 'commons-cli', name: 'commons-cli', version:'1.2'
    compile group: 'org.apache.logging.log4j', name: 'log4j-core', version:'2.0.2'
    compile group: 'com.jayway.jsonpath', name: 'json-path', version:'2.2.0'
    testCompile group: 'junit', name: 'junit', version:'4.12'
    compile group: 'Amazon', name: 'aws-java-sdk', version:'1.10.56'
    compile group: 'Huawei', name: 'java-sdk-core', version:'2.0.1'
        
    compile files("${System.properties['java.home']}/../lib/tools.jar")

	

}


processResources {
  filter { String line -> line.replace("\${pom.version}", version) }
  filter { String line -> line.replace("\${timestamp}", getDate()) }

}

def getDate() {
    def date = new Date()
    def formattedDate = date.format('yyyy.MM.dd HH:mm')
    return formattedDate
}



apply from: "http://dl.bintray.com/content/shemnon/javafx-gradle/8.1.1/javafx.plugin"



// Configures plugin
javafx {
    // Points to JDK and its JavaFX libraries, also declares target runtime JDK
    javaRuntime = 'C:/Program Files/Java/jdk1.8.0_74/jre'
    //javaRuntime = 'C:/Program Files/Java/jdk1.7.0_80/jre'

    
    // Application name and ID presented by target OS
    appID 'otc'
    appName 'otc'
    
    // Main class of application
    mainClass 'com.tsystems.otc.OtcMain'
    
    // JVM arguments, system properties, application command line arguments
    //jvmArgs = ['-XX:+AggressiveOpts', '-XX:CompileThreshold=1']
    //systemProperties = ['prism.disableRegionCaching':'true']
    //arguments = ['-l', '--fast']

jvmArgs = ['-verbose:class']
systemProperties = ['javafx.verbose':'true', 'prism.verbose':'true']

    // Keystore credentials for signing JAR
    // Generate key: keytool -genkey -alias release -keyalg RSA -keystore keystore.jks -keysize 2048
    /*
    releaseKey {
        alias = 'release'
        keyPass = getProjectProperty('keyStorePassword')
        keyStore = file("${System.properties['user.home']}/keystore/keystore.jks")
        storePass = getProjectProperty('storePassword')
    }
    
    signingMode 'release'
    */
    // ...
}
